import os
import time
from typing import Dict
import google.generativeai as genai
from dotenv import load_dotenv

# Import pour le typage, g√©r√© de mani√®re souple
try:
    from facebook_client import Ad
except ImportError:
    Ad = Dict

# Charger les variables d'environnement
load_dotenv()

def _format_ad_metrics_for_prompt(ad_data: Ad) -> str:
    """Met en forme les m√©triques de la publicit√© pour une injection propre dans le prompt."""
    if not ad_data or not ad_data.insights:
        return "Pas de donn√©es de performance fournies."
    
    insights = ad_data.insights
    metrics = [
        f"- D√©pense totale (Spend): {getattr(insights, 'spend', 'N/A'):.2f} ‚Ç¨",
        f"- Co√ªt par Achat (CPA): {getattr(insights, 'cpa', 'N/A'):.2f} ‚Ç¨",
    ]
    # Ajoutons les m√©triques suppl√©mentaires si elles existent, sans causer d'erreur
    if hasattr(insights, 'ctr'):
        metrics.append(f"- Taux de Clic (CTR): {insights.ctr:.2f}%")
    if hasattr(insights, 'cpm'):
        metrics.append(f"- Co√ªt pour 1000 Impressions (CPM): {insights.cpm:.2f} ‚Ç¨")
        
    return "\\n".join(metrics)


def analyze_video(video_path: str, ad_data: Ad) -> str:
    """
    Analyse une vid√©o et ses m√©triques pour fournir une explication textuelle de sa performance.

    Args:
        video_path: Le chemin local vers le fichier vid√©o.
        ad_data: L'objet contenant les donn√©es de la publicit√© (nom, insights, etc.).

    Returns:
        Une cha√Æne de caract√®res contenant l'analyse marketing, ou un message d'erreur.
    """
    print(f"  üß† Lancement de l'analyse marketing pour la publicit√© '{ad_data.name}'...")
    video_file = None

    try:
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("La cl√© d'API GEMINI_API_KEY n'est pas trouv√©e.")

        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(os.getenv("GEMINI_MODEL_NAME"))

        print(f"    ‚ñ∂Ô∏è Upload de la vid√©o '{os.path.basename(video_path)}'...")
        video_file = genai.upload_file(path=video_path, display_name=f"Ad: {ad_data.id}")
        
        while video_file.state.name == "PROCESSING":
            time.sleep(5)
            video_file = genai.get_file(video_file.name)
        
        if video_file.state.name == "FAILED":
             raise ValueError(f"Le traitement de la vid√©o {video_file.name} a √©chou√©.")

        # --- Construction du Prompt Simplifi√© ---
        metrics_text = _format_ad_metrics_for_prompt(ad_data)
        
        prompt = f"""
        **Contexte:** Tu es un expert en strat√©gie marketing digital, sp√©cialis√© dans l'analyse de publicit√©s vid√©o sur les r√©seaux sociaux. On te pr√©sente une publicit√© vid√©o qui est consid√©r√©e comme "gagnante" ainsi que ses m√©triques de performance cl√©s.

        **M√©trique de la Publicit√© Gagnante:**
        {metrics_text}

        **Ta Mission:**
        Analyse la vid√©o fournie √† la lumi√®re de ses performances. R√©dige une analyse concise et percutante expliquant **POURQUOI** cette publicit√© a fonctionn√©. Ta r√©ponse doit √™tre directement exploitable par un professionnel du marketing.

        **Points √† couvrir dans ton analyse (sans forc√©ment suivre cette structure) :**
        - **Le Hook (Accroche) :** Comment les 3 premi√®res secondes captent-elles l'attention ?
        - **La Narration :** Quelle histoire est racont√©e ? Est-elle claire et convaincante ?
        - **Les √âl√©ments Visuels et le Rythme :** Le style visuel et le montage servent-ils le message ?
        - **La Proposition de Valeur :** Le b√©n√©fice pour le client est-il √©vident ?
        - **L'Appel √† l'Action (CTA) :** Le CTA est-il clair et incitatif ?
        - **Corr√©lation :** Fais le lien entre des √©l√©ments sp√©cifiques de la vid√©o et les bonnes m√©triques (ex: "Le hook percutant explique probablement le bon CTR", "La clart√© de l'offre justifie le CPA bas").

        **Format de R√©ponse Attendu:**
        Un texte fluide, r√©dig√© et professionnel. Pas de JSON. Commence directement par ton analyse.
        """

        print("    ‚ñ∂Ô∏è Envoi du prompt simplifi√© et de la vid√©o au mod√®le...")
        response = model.generate_content([prompt, video_file])

        print("    ‚úÖ R√©ponse re√ßue !")
        
        genai.delete_file(video_file.name)
        
        return response.text.strip()

    except Exception as e:
        print(f"    ‚ùå Une erreur est survenue lors de l'analyse Gemini : {e}")
        if video_file:
            try:
                genai.delete_file(video_file.name)
            except Exception as delete_error:
                print(f"      Tentative de nettoyage du fichier distant √©chou√©e: {delete_error}")
        return f"Erreur lors de l'analyse : {e}" 