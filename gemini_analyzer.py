import os
import time
import json
import google.generativeai as genai
from dotenv import load_dotenv

# Charger les variables d'environnement pour que le module puisse √™tre utilis√© seul
load_dotenv()

def analyze_video(video_path: str) -> dict:
    """
    Analyse une vid√©o locale en utilisant l'API Google AI (avec cl√© API).
    Cette fonction uploade la vid√©o, envoie un prompt d√©taill√© pour une analyse
    publicitaire, et retourne le r√©sultat structur√© sous forme de dictionnaire.

    Args:
        video_path: Le chemin local vers le fichier vid√©o.

    Returns:
        Un dictionnaire contenant l'analyse structur√©e, ou un dictionnaire d'erreur.
    """
    print("  üß† Lancement de l'analyse vid√©o avec Gemini...")
    video_file = None # Initialiser au cas o√π l'upload √©choue

    try:
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("La cl√© d'API GEMINI_API_KEY n'a pas √©t√© trouv√©e dans le fichier .env")

        model_name = os.getenv("GEMINI_MODEL_NAME")
        if not model_name:
            raise ValueError("Le nom du mod√®le GEMINI_MODEL_NAME n'a pas √©t√© trouv√© dans le fichier .env")

        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(model_name)

        print(f"    ‚ñ∂Ô∏è Upload de la vid√©o '{os.path.basename(video_path)}'...")
        video_file = genai.upload_file(path=video_path, display_name="Analyse publicitaire")
        
        # Attendre que la vid√©o soit pr√™te pour l'analyse
        while video_file.state.name == "PROCESSING":
            time.sleep(5)
            video_file = genai.get_file(video_file.name)
        
        if video_file.state.name == "FAILED":
             raise ValueError(f"Le traitement de la vid√©o {video_file.name} a √©chou√©.")

        prompt = """
        Analyse la publicit√© vid√©o fournie et retourne un rapport d√©taill√© au format JSON.
        Le JSON doit avoir la structure suivante :
        {
          "transcription": "La transcription int√©grale et textuelle de toute parole. Si vide, retourne une cha√Æne vide.",
          "hook_analysis": {
            "description": "Une description de ce qui se passe dans les 3 premi√®res secondes (visuels et sonores) pour capter l'attention.",
            "effectiveness_score": "Une note de 1 √† 10 sur l'efficacit√© per√ßue du hook."
          },
          "shot_changes": [
            { "timestamp": "00:02", "description": "Description de la sc√®ne au moment du changement de plan." },
            { "timestamp": "00:05", "description": "Description de la nouvelle sc√®ne." }
          ],
          "on_screen_text": [
            { "text": "50% de r√©duction", "timestamp": "00:07" }
          ],
          "visual_elements": {
            "main_characters": "Description des personnages principaux ou acteurs.",
            "setting": "Description du lieu et de l'environnement.",
            "key_objects": ["Liste", "des", "objets", "importants", "montr√©s"],
            "logo_mentions": "Description des moments o√π le logo de la marque appara√Æt."
          },
          "audio_elements": {
            "music_style": "Description du style de musique de fond (√©pique, joyeuse, etc.).",
            "sound_effects": ["Liste", "des", "effets", "sonores", "marquants"]
          },
          "narrative_summary": "Un r√©sum√© concis de l'histoire racont√©e par la publicit√©.",
          "call_to_action": "Description de l'appel √† l'action final (ex: 'Visitez notre site', 'T√©l√©chargez l'application').",
          "target_audience": "Description du public cible probable de cette publicit√©.",
          "overall_feeling": "Le sentiment g√©n√©ral ou l'√©motion que la publicit√© cherche √† provoquer (confiance, urgence, joie, etc.)."
        }
        Ne retourne rien d'autre que le JSON lui-m√™me.
        """

        print("    ‚ñ∂Ô∏è Envoi du prompt et de la vid√©o au mod√®le...")
        response = model.generate_content([prompt, video_file])

        print("    ‚úÖ R√©ponse re√ßue !")
        
        # Nettoyage du fichier upload√© sur les serveurs de Google
        genai.delete_file(video_file.name)
        video_file = None # Le fichier distant n'existe plus

        # Extraire et parser le JSON
        json_text = response.text.replace("```json", "").replace("```", "").strip()
        return json.loads(json_text)

    except Exception as e:
        print(f"    ‚ùå Une erreur est survenue lors de l'analyse Gemini : {e}")
        # En cas d'erreur, tenter de supprimer le fichier s'il a √©t√© upload√©
        if video_file:
            try:
                genai.delete_file(video_file.name)
            except Exception as delete_error:
                print(f"      Tentative de nettoyage du fichier distant √©chou√©e: {delete_error}")
        return {"error": str(e)} 