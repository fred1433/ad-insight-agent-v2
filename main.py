import os
import pprint
import json

import facebook_client
from video_downloader import VideoDownloader
from config import config
import gemini_analyzer

def main():
    """
    Point d'entr√©e principal du script.
    Orchestre le processus de r√©cup√©ration des publicit√©s, de t√©l√©chargement et d'analyse.
    """
    print("üöÄ D√©marrage du pipeline d'analyse des publicit√©s...")

    # 1. R√©cup√©rer les publicit√©s depuis Facebook
    print("\n--- √âtape 1: R√©cup√©ration des publicit√©s ---")
    winning_ads = facebook_client.get_winning_ads()
    if not winning_ads:
        print("‚úÖ Aucune publicit√© trouv√©e. Le script se termine.")
        return
    
    video_ads = [ad for ad in winning_ads if ad.video_id]
    if not video_ads:
        print("‚úÖ Aucune publicit√© vid√©o trouv√©e. Le script se termine.")
        return

    # Limiter le nombre de vid√©os √† traiter pour les tests
    ads_to_process = video_ads
    if config.script.max_ads_per_run > 0:
        print(f"\nüî¨ Mode test : Traitement limit√© √† {config.script.max_ads_per_run} vid√©o(s).")
        ads_to_process = video_ads[:config.script.max_ads_per_run]

    downloader = VideoDownloader()
    os.makedirs("reports", exist_ok=True)

    # 2. Traiter chaque publicit√©
    print("\n--- √âTAPE 2 : TEST DE COLLECTE DE DONN√âES UNIQUEMENT ---")
    if ads_to_process:
        print("Affichage des m√©triques pour la premi√®re publicit√© trouv√©e...")
        first_ad = ads_to_process[0]
        print(f"  - Ad ID: {first_ad.id}")
        print(f"  - Ad Name: {first_ad.name}")
        
        print("\n--- Donn√©es collect√©es ---")
        if first_ad.insights:
            # Utilise pprint pour un affichage lisible du dictionnaire des insights
            pprint.pprint(first_ad.insights.model_dump())
        else:
            print("Aucun insight trouv√© pour cette publicit√©.")

    # --- L'ancien traitement est mis en commentaire pour le test ---
    # for ad in ads_to_process:
    #     print(f"\n{'*' * 20} Traitement de la publicit√© {ad.id} {'*' * 20}")

    #     # 2a. T√©l√©charger la vid√©o en local
    #     local_video_path = downloader.download_video_locally(video_id=ad.video_id, ad_id=ad.id)
        
    #     if not local_video_path:
    #         print(f"‚ùå √âchec du t√©l√©chargement pour la publicit√© {ad.id}. Passage √† la suivante.")
    #         continue
        
    #     # 2b. Analyser la vid√©o avec Gemini
    #     try:
    #         analysis_report_text = gemini_analyzer.analyze_video(
    #             video_path=local_video_path,
    #             ad_data=ad
    #         )
            
    #         # Sauvegarder le rapport texte dans un fichier markdown
    #         report_path = f"reports/{ad.id}.md"
    #         with open(report_path, "w", encoding="utf-8") as f:
    #             f.write(f"# Analyse Marketing de la Publicit√©: {ad.name} (ID: {ad.id})\\n\\n")
    #             f.write(analysis_report_text)
            
    #         print(f"  ‚úÖ Analyse termin√©e et sauvegard√©e dans '{report_path}'.")
    #         print("\n--- D√âBUT DU RAPPORT ---")
    #         print(analysis_report_text)
    #         print("--- FIN DU RAPPORT ---\\n")

    #     except Exception as e:
    #         print(f"‚ùå Erreur lors de l'analyse Gemini pour la vid√©o {local_video_path}: {e}")
        
    #     finally:
    #         # 2c. Nettoyer le fichier vid√©o local
    #         print(f"  üóëÔ∏è Nettoyage du fichier local '{local_video_path}'...")
    #         os.remove(local_video_path)
    #         print("  ‚úÖ Fichier local supprim√©.")

    print("\nüéâ Pipeline termin√©.")

if __name__ == '__main__':
    main() 