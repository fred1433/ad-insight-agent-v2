import os
import facebook_client
import google_analyzer
import pprint
from video_downloader import VideoDownloader
from config import config

def main():
    """
    Point d'entr√©e principal du script.
    Orchestre le processus de r√©cup√©ration des publicit√©s, de t√©l√©chargement des vid√©os
    et d'analyse.
    """
    print("üöÄ D√©marrage du pipeline d'analyse des publicit√©s...")

    # 1. R√©cup√©rer les publicit√©s gagnantes depuis Facebook
    print("\n--- √âtape 1: R√©cup√©ration des publicit√©s gagnantes ---")
    winning_ads = facebook_client.get_winning_ads()
    if not winning_ads:
        print("‚úÖ Aucune publicit√© gagnante trouv√©e. Le script se termine.")
        return
    print(f"üìä {len(winning_ads)} publicit√©(s) gagnante(s) trouv√©e(s).")

    # Filtrer pour ne garder que les publicit√©s avec une vid√©o
    video_ads = [ad for ad in winning_ads if ad.video_id]
    if not video_ads:
        print("‚úÖ Aucune publicit√© vid√©o parmi les gagnantes. Le script se termine.")
        return
        
    for ad in winning_ads:
        print(f"  - Ad ID: {ad.id}, Name: {ad.name}, Video ID: {ad.video_id}")

    # Limiter le nombre de vid√©os √† traiter pour les tests
    ads_to_process = video_ads
    if config.script.max_ads_per_run > 0:
        print(f"\nüî¨ Mode test : Traitement limit√© √† {config.script.max_ads_per_run} vid√©o(s).")
        ads_to_process = video_ads[:config.script.max_ads_per_run]

    # Initialiser les clients n√©cessaires
    downloader = VideoDownloader()
    # La logique d'analyse sera ajout√©e ici plus tard
    # analyzer = google_client.VideoAnalyzer()

    # 2. Traiter chaque publicit√© gagnante
    print("\n--- √âtape 2: Traitement de chaque publicit√© ---")
    for ad in ads_to_process:
        print(f"\n{'*' * 40}")
        print(f"‚ú® Traitement de la publicit√© : {ad.id} ({ad.name})")
        print(f"{'*' * 40}")

        # 2a. T√©l√©charger la vid√©o et la t√©l√©verser sur GCS
        print(f"  üì• T√©l√©chargement de la vid√©o (ID: {ad.video_id})...")
        video_gcs_uri = downloader.download_and_upload_video(video_id=ad.video_id, ad_id=ad.id)
        
        if not video_gcs_uri:
            print(f"‚ùå √âchec du t√©l√©chargement pour la publicit√© {ad.id}. Passage √† la suivante.")
            continue
        # Le message de succ√®s est d√©j√† dans le downloader, pas besoin de le dupliquer ici.

        # 2b. Analyser la vid√©o avec les services Google Cloud
        print("\n  üß† Lancement de l'analyse vid√©o avec Google AI...")
        try:
            analysis_results = google_analyzer.extract_video_annotations(video_gcs_uri)
            print("  ‚úÖ Analyse GVI termin√©e.")
            print("  R√©sultats de l'analyse :")
            pprint.pprint(analysis_results)
        except Exception as e:
            print(f"‚ùå Erreur lors de l'analyse de la vid√©o {video_gcs_uri}: {e}")

    print("\nüéâ Pipeline termin√©.")

if __name__ == '__main__':
    main() 