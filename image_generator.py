import os
from dotenv import load_dotenv
import google.generativeai as genai
from google.api_core import exceptions
from typing import Tuple

# --- CONFIGURATION ---
# Le nom du mod√®le et la cl√© API sont maintenant charg√©s depuis les variables d'environnement.
MODEL_NAME = os.getenv("IMAGEN_MODEL_NAME", "imagen-3.0-generate-002")
# --- FIN CONFIGURATION ---

# On charge les variables d'environnement depuis le fichier .env
load_dotenv()

# Configuration de l'API Gemini directement avec la cl√©.
# Cette ligne doit √™tre ex√©cut√©e apr√®s load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

def generate_image_from_prompt(prompt: str, output_filename: str) -> Tuple[str | None, int]:
    """
    G√©n√®re une seule image √† partir d'un prompt en utilisant Imagen via l'API Gemini.

    Args:
        prompt: Le texte descriptif pour g√©n√©rer l'image.
        output_filename: Le nom du fichier de sortie (sans chemin).

    Returns:
        Un tuple contenant le chemin de l'image et le nombre d'images g√©n√©r√©es (0 ou 1).
    """
    # On enrichit le prompt pour de meilleurs r√©sultats et pour √©viter le texte
    enhanced_prompt = f"Photographie hyper-r√©aliste et d√©taill√©e de : '{prompt}'. Style cin√©matique. IMPORTANT : L'image ne doit contenir absolument aucun texte, mot, lettre ou logo."

    try:
        # Assure que le r√©pertoire de sortie existe
        output_dir = "tmp"
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        full_output_path = os.path.join(output_dir, output_filename)

        # L'initialisation du client n'est plus n√©cessaire car on a utilis√© genai.configure()
        
        print(f"  üñºÔ∏è  G√©n√©ration d'image avec le mod√®le '{MODEL_NAME}' et le prompt : \"{prompt[:80]}...\"")
        
        # G√©n√©ration de l'image
        response = genai.generate_images(
            model=MODEL_NAME,
            prompt=enhanced_prompt,
            # Le nombre d'images est maintenant un param√®tre direct
            number_of_images=1,
        )

        # La nouvelle API retourne une liste d'objets GeneratedImage
        if response.images:
            # On acc√®de aux donn√©es binaires de l'image via ._image_bytes
            with open(full_output_path, 'wb') as f:
                f.write(response.images[0]._image_bytes)
                
            print(f"‚úÖ Image sauvegard√©e avec succ√®s : {full_output_path}")
            return full_output_path, len(response.images)
        else:
            print("‚ö†Ô∏è La g√©n√©ration d'image n'a retourn√© aucun r√©sultat.")
            return None, 0

    except Exception as e:
        print(f"‚ùå Une erreur est survenue lors de la g√©n√©ration de l'image : {e}")
        return None, 0 